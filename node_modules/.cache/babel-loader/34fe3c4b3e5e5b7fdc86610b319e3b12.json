{"ast":null,"code":"import _classCallCheck from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/anna_gavrilova/my-chat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/anna_gavrilova/my-chat/src/components/home/ChatWindow.js\";\nimport React, { Component } from 'react';\nimport { socket } from '../App';\nimport io from \"socket.io-client\";\nimport './Home.css';\nimport { _conv as ConvService } from '../App';\n\nvar ChatList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatList, _Component);\n\n  function ChatList(props) {\n    var _this;\n\n    _classCallCheck(this, ChatList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatList).call(this, props));\n\n    _this.sendClick = function (e) {\n      ConvService.sendMessage(_this.state.newMessage, _this.props.selectedChat).then(function (response) {\n        _this.setState({\n          newMessage: ''\n        });\n      }).then(function (_) {\n        socket.emit('message', {\n          room: _this.props.selectedChat,\n          sender: _this.props.user\n        });\n      });\n    };\n\n    _this.typing = function (event) {\n      _this.setState({\n        newMessage: event.target.value\n      });\n\n      socket.emit('typing', {\n        room: _this.props.selectedChat,\n        sender: _this.props.user\n      });\n    };\n\n    _this.keyDown = function (e) {\n      if (e.keyCode == 13) {\n        _this.sendClick(e);\n      }\n    };\n\n    _this.state = {\n      newMessage: '',\n      chatHistory: _this.props.chatHistory,\n      newmessages: [],\n      newmessagetrigger: true,\n      isTyping: false\n    };\n    _this.renderHistory = _this.renderHistory.bind(_assertThisInitialized(_this));\n    socket.on('typing', function (data) {\n      if (data.sender.id !== _this.props.user.id) {\n        _this.setState({\n          isTyping: true\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            isTyping: false\n          });\n        }, 8000);\n      }\n    });\n    return _this;\n  }\n\n  _createClass(ChatList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"enterRoom\",\n    value: function enterRoom() {}\n  }, {\n    key: \"renderHistory\",\n    value: function renderHistory() {\n      var _this2 = this;\n\n      var messages = [];\n\n      if (this.props.chatHistory) {\n        messages = this.props.chatHistory.slice().map(function (message) {\n          return React.createElement(\"div\", {\n            className: message.sender ? message.sender.id == _this2.props.user.id ? 'myMessage' : 'theirMessage' : '',\n            key: message._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, message.sender ? message.sender.name : 'anonymous', \":\", message.text);\n        });\n      }\n\n      return messages.length ? messages : React.createElement(\"div\", {\n        className: \"empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"This chat is empty\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"chatWindow wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"messageHistory\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"room is \", this.props.selectedChat, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.renderHistory())), React.createElement(\"div\", {\n        className: \"userTyping\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.isTyping ? \"typing\" : ''), React.createElement(\"div\", {\n        className: \"inputBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.newMessage,\n        onChange: function onChange(event) {\n          return _this3.typing(event);\n        },\n        onKeyDown: this.keyDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: function onClick(event) {\n          return _this3.sendClick(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Send!\")));\n    }\n  }]);\n\n  return ChatList;\n}(Component);\n\nexport default ChatList;","map":{"version":3,"sources":["/Users/anna_gavrilova/my-chat/src/components/home/ChatWindow.js"],"names":["React","Component","socket","io","_conv","ConvService","ChatList","props","sendClick","e","sendMessage","state","newMessage","selectedChat","then","response","setState","_","emit","room","sender","user","typing","event","target","value","keyDown","keyCode","chatHistory","newmessages","newmessagetrigger","isTyping","renderHistory","bind","on","data","id","setTimeout","messages","slice","map","message","_id","name","text","length"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,YAAP;AACA,SAAQC,KAAK,IAAIC,WAAjB,QAAmC,QAAnC;;IAGMC,Q;;;;;AAEF,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,kFAAMA,KAAN;;AADc,UAgDlBC,SAhDkB,GAgDR,UAACC,CAAD,EAAK;AAEXJ,MAAAA,WAAW,CAACK,WAAZ,CAAwB,MAAKC,KAAL,CAAWC,UAAnC,EAA8C,MAAKL,KAAL,CAAWM,YAAzD,EACKC,IADL,CACU,UAAAC,QAAQ,EAAE;AACZ,cAAKC,QAAL,CAAc;AACVJ,UAAAA,UAAU,EAAC;AADD,SAAd;AAGH,OALL,EAMKE,IANL,CAMU,UAAAG,CAAC,EAAE;AACLf,QAAAA,MAAM,CAACgB,IAAP,CAAY,SAAZ,EAAsB;AAACC,UAAAA,IAAI,EAAC,MAAKZ,KAAL,CAAWM,YAAjB;AAA8BO,UAAAA,MAAM,EAAC,MAAKb,KAAL,CAAWc;AAAhD,SAAtB;AACH,OARL;AASF,KA3DgB;;AAAA,UA6DjBC,MA7DiB,GA6DV,UAACC,KAAD,EAAS;AACb,YAAKP,QAAL,CAAc;AAACJ,QAAAA,UAAU,EAACW,KAAK,CAACC,MAAN,CAAaC;AAAzB,OAAd;;AACAvB,MAAAA,MAAM,CAACgB,IAAP,CAAY,QAAZ,EAAqB;AAACC,QAAAA,IAAI,EAAC,MAAKZ,KAAL,CAAWM,YAAjB;AAA8BO,QAAAA,MAAM,EAAC,MAAKb,KAAL,CAAWc;AAAhD,OAArB;AAEF,KAjEgB;;AAAA,UAmEjBK,OAnEiB,GAmET,UAACjB,CAAD,EAAK;AACV,UAAIA,CAAC,CAACkB,OAAF,IAAa,EAAjB,EAAsB;AAClB,cAAKnB,SAAL,CAAeC,CAAf;AACH;AACH,KAvEgB;;AAEd,UAAKE,KAAL,GAAW;AACPC,MAAAA,UAAU,EAAC,EADJ;AAEPgB,MAAAA,WAAW,EAAC,MAAKrB,KAAL,CAAWqB,WAFhB;AAGPC,MAAAA,WAAW,EAAC,EAHL;AAIPC,MAAAA,iBAAiB,EAAC,IAJX;AAKPC,MAAAA,QAAQ,EAAC;AALF,KAAX;AAQA,UAAKC,aAAL,GAAmB,MAAKA,aAAL,CAAmBC,IAAnB,+BAAnB;AAEA/B,IAAAA,MAAM,CAACgC,EAAP,CAAU,QAAV,EAAmB,UAAAC,IAAI,EAAE;AACrB,UAAGA,IAAI,CAACf,MAAL,CAAYgB,EAAZ,KAAiB,MAAK7B,KAAL,CAAWc,IAAX,CAAgBe,EAApC,EAAuC;AACnC,cAAKpB,QAAL,CAAc;AAACe,UAAAA,QAAQ,EAAC;AAAV,SAAd;;AACAM,QAAAA,UAAU,CAAC,YAAI;AACX,gBAAKrB,QAAL,CAAc;AAACe,YAAAA,QAAQ,EAAC;AAAV,WAAd;AACH,SAFS,EAER,IAFQ,CAAV;AAGH;AAEJ,KARD;AAZc;AAuBjB;;;;wCAEkB,CAElB;;;yCAEmB,CACnB;;;gCAEU,CAEV;;;oCAGc;AAAA;;AACX,UAAIO,QAAQ,GAAC,EAAb;;AACD,UAAG,KAAK/B,KAAL,CAAWqB,WAAd,EAA0B;AACrBU,QAAAA,QAAQ,GAAC,KAAK/B,KAAL,CAAWqB,WAAX,CAAuBW,KAAvB,GAA+BC,GAA/B,CAAmC,UAAAC,OAAO,EAAE;AACjD,iBAAO;AAAK,YAAA,SAAS,EAAEA,OAAO,CAACrB,MAAR,GAAgBqB,OAAO,CAACrB,MAAR,CAAegB,EAAf,IAAmB,MAAI,CAAC7B,KAAL,CAAWc,IAAX,CAAgBe,EAAnC,GAAsC,WAAtC,GAAkD,cAAlE,GAAkF,EAAlG;AAAsG,YAAA,GAAG,EAAEK,OAAO,CAACC,GAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAyHD,OAAO,CAACrB,MAAR,GAAeqB,OAAO,CAACrB,MAAR,CAAeuB,IAA9B,GAAmC,WAA5J,OAA0KF,OAAO,CAACG,IAAlL,CAAP;AACH,SAFQ,CAAT;AAGJ;;AACD,aAAON,QAAQ,CAACO,MAAT,GAAgBP,QAAhB,GAAyB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAhC;AACF;;;6BA8BO;AAAA;;AAEJ,aACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACS,KAAK/B,KAAL,CAAWM,YADpB,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKmB,aAAL,EADL,CAFJ,CADJ,EAQI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,KAAKrB,KAAL,CAAWoB,QAAX,GAAoB,QAApB,GAA6B,EAA1D,CARJ,EASI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWC,UAArC;AAAiD,QAAA,QAAQ,EAAE,kBAACW,KAAD;AAAA,iBAAW,MAAI,CAACD,MAAL,CAAYC,KAAZ,CAAX;AAAA,SAA3D;AAA0F,QAAA,SAAS,EAAE,KAAKG,OAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,iBAACH,KAAD;AAAA,iBAAW,MAAI,CAACf,SAAL,CAAee,KAAf,CAAX;AAAA,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CATJ,CADJ;AAkBH;;;;EAjGkBtB,S;;AAoGvB,eAAeK,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport {socket} from '../App'\nimport io from \"socket.io-client\"\nimport './Home.css'\nimport {_conv as ConvService} from '../App';\n\n\nclass ChatList extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            newMessage:'',\n            chatHistory:this.props.chatHistory,\n            newmessages:[],\n            newmessagetrigger:true,\n            isTyping:false\n        }\n        \n        this.renderHistory=this.renderHistory.bind(this)\n      \n        socket.on('typing',data=>{\n            if(data.sender.id!==this.props.user.id){\n                this.setState({isTyping:true})\n                setTimeout(()=>{\n                    this.setState({isTyping:false})\n                },8000)\n            }\n\n        })\n\n\n    }\n\n    componentDidMount(){\n       \n    }\n\n    componentWillMount(){\n    }\n\n    enterRoom(){\n\n    }\n\n\n    renderHistory(){\n        var messages=[];\n       if(this.props.chatHistory){\n            messages=this.props.chatHistory.slice().map(message=>{\n                return <div className={message.sender?(message.sender.id==this.props.user.id?'myMessage':'theirMessage'):''} key={message._id}>{message.sender?message.sender.name:'anonymous'}:{message.text}</div>\n            });\n       }\n       return messages.length?messages:<div className=\"empty\">This chat is empty</div>;\n    }\n\n\n    sendClick=(e)=>{\n        \n        ConvService.sendMessage(this.state.newMessage,this.props.selectedChat)\n            .then(response=>{\n                this.setState({\n                    newMessage:''\n                });\n            })\n            .then(_=>{\n                socket.emit('message',{room:this.props.selectedChat,sender:this.props.user})\n            })\n     }\n\n     typing=(event)=>{\n        this.setState({newMessage:event.target.value})\n        socket.emit('typing',{room:this.props.selectedChat,sender:this.props.user})\n        \n     }\n\n     keyDown=(e)=>{\n        if (e.keyCode == 13 ) {\n            this.sendClick(e)\n        }\n     }\n\n    \n\n    render(){\n        \n        return(\n            <div className=\"chatWindow wrap\">\n                <ul className=\"messageHistory\">\n                room is {this.props.selectedChat}\n                    <div>\n                        {this.renderHistory()}\n                    </div>\n\n                </ul>\n                <div className=\"userTyping\">{this.state.isTyping?\"typing\":''}</div>\n                <div className=\"inputBox\">\n                    <input type=\"text\" value={this.state.newMessage} onChange={(event) => this.typing(event)} onKeyDown={this.keyDown}></input>\n                    <button type='submit' onClick={(event) => this.sendClick(event)}>Send!</button>\n                </div>\n                \n            </div>\n        )\n\n    }\n}\n\nexport default ChatList;"]},"metadata":{},"sourceType":"module"}